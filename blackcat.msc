using Application;
using System;
using Console;
using Event;
using String;
using File;
using Encoding;

StringResult admin = Application.RequestAdminPrivilege();
string targetIP;

string appDir = Application.GetFileDirectory();

if(admin.GetResult() == true){
    Console.WriteLine("\n\n[blackcat exploit tool loaded]\n'bcat -h' for help\n\n");
}
else{
    Console.WriteLine("blackcat error: ["..admin.GetString().."]");
    Application.Exit();
}

function cipher(string[] arg){
    if(arg[3] == "cs"){
        number counter = -5;
        while(counter <= 5){
            if(counter != 0){
                System.RunCommand("cshift "..arg[4].." "..counter);
                counter = counter + 1;
            }
            else{
                counter = counter + 1;
                continue;
            }
        }
    }
    if(arg[3] == "cn"){
        System.RunCommand("getchar "..arg[4]);
    }
}

function main(string[] args){
    if(args[2] == "-s"){
        File.CreateDir(appDir, "tools");
        File.Write(appDir.."/tools", "hash_conceal.exe", "");
        File.Write(appDir.."/tools", "bf_password.exe", "");
        File.Write(appDir.."/tools", "spoof_address.exe", "");
        System.RunCommand("cd tools");
        Console.Clear();
        System.RunCommand("run hash_conceal.exe");
        targetIP = args[3];
        Console.WriteLine("[Target IP]: "..targetIP);
    }
    if(args[2] == "-i"){
        targetIP = args[3];
        Console.WriteLine("[Target IP]: "..targetIP);
    }
    if(args[2] == "-h"){
        StringResult manual = File.Read(appDir, "bcat.man");
        Console.WriteLine(manual.GetString());
    }
    if(args[2] == "-bf"){
        System.RunCommand("stop spoof_address.exe");
        System.RunCommand("run bf_password.exe "..targetIP);
    }
    if(args[2] == "-c"){
        System.RunCommand("run spoof_address.exe "..targetIP);
        Console.WriteLine("[Attempting Connection]");
        System.RunCommand("remote connect "..targetIP.." "..args[3]);
    }
    if(args[2] == "-dc"){
        Console.WriteLine("[Disconnecting]");
        System.RunCommand("remote disconnect");
        System.RunCommand("stop spoof_address.exe");
    }
    if(args[2] == "-pwd"){
        cipher(args);
    }
    if(args[2] == "-bE"){
        StringResult b64Enc = Encoding.Base64Encode(args[3]);
        Console.WriteLine("[Base 64 Encode]: "..b64Enc.GetString());
    }
    if(args[2] == "-bD"){
        StringResult b64Dec = Encoding.Base64Decode(args[3]);
        Console.WriteLine("[Base 64 Decode]: "..b64Dec.GetString());
    }
    if(args[2] == "exit"){
        Console.WriteLine("[Stopping Blackcat]");
        System.RunCommand("remote disconnect");
        System.RunCommand("stop spoof_address.exe");
        System.RunCommand("stop bf_password.exe");
        System.RunCommand("stop hash_conceal.exe");
        if(Console.GetCurrentDirectory() == appDir.."/tools"){
            System.RunCommand("cd ..");
        }
        File.RemoveDir(appDir, "tools");
        Console.Clear();
        Application.Exit();
    }
}

function onShCMD(string command){
    command = String.Trim(command);
    if(String.Contains(command, "bcat")){
        string[] args;
        if(String.Contains(command, " ") == false){
            Console.WriteLine("[Invalid Command]\ntry 'bcat -h' for help");
        }
        else{
            args = String.Split(command, " ");
        }
        main(args);
    }
    Event.ClearEvents();
}

Event.AddListener("ConsoleCommand", "command", "onShCMD");

while(true){
    Event.Process();
}
